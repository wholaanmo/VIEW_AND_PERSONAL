const { 
    create, 
    getUserByUserId, 
    getUsers, 
    updateUser, 
    deleteUser, 
    getUserByUserEmail
} = require ("../users/user.service");

const {genSaltSync, hashSync, compareSync } = require("bcrypt");
const { sign } = require ("jsonwebtoken");
const crypto = require('crypto');
const { sendResetEmail } = require('../../utils/emailService');
const resetUrl = `${process.env.FRONTEND_URL}/reset-password?token=${resetToken}`;
await sendResetEmail(user.email, resetUrl);

module.exports = {
    forgotPassword: async (req, res) => {
        try {
          const { email } = req.body;
          const user = await getUserByUserEmail(email);
    
          if (!user) {
            return res.json({
              success: 0,
              message: 'If this email exists, a reset link will be sent'
            });
          }
    
          // Generate reset token (expires in 1 hour)
          const resetToken = crypto.randomBytes(20).toString('hex');
          const resetTokenExpiry = Date.now() + 3600000; // 1 hour from now
    
          // Update user with reset token
          await pool.execute(
            'UPDATE users SET reset_token = ?, reset_token_expiry = ? WHERE id = ?',
            [resetToken, new Date(resetTokenExpiry), user.id]
          );
    
          // Send email with reset link
          const resetUrl = `http://yourfrontend.com/reset-password?token=${resetToken}`;
          await sendResetEmail(user.email, resetUrl);
    
          return res.json({
            success: 1,
            message: 'If this email exists, a reset link will be sent'
          });
        } catch (err) {
          console.error('Forgot password error:', err);
          return res.status(500).json({
            success: 0,
            message: 'Error processing request'
          });
        }
      },
    
      resetPassword: async (req, res) => {
        try {
          const { token, newPassword } = req.body;
    
          // Find user by token
          const [users] = await pool.execute(
            'SELECT * FROM users WHERE reset_token = ? AND reset_token_expiry > ?',
            [token, new Date()]
          );
    
          if (users.length === 0) {
            return res.json({
              success: 0,
              message: 'Invalid or expired token'
            });
          }
    
          const user = users[0];
    
          // Hash new password
          const salt = genSaltSync(10);
          const hashedPassword = hashSync(newPassword, salt);
    
          // Update password and clear reset token
          await pool.execute(
            'UPDATE users SET password = ?, reset_token = NULL, reset_token_expiry = NULL WHERE id = ?',
            [hashedPassword, user.id]
          );
    
          return res.json({
            success: 1,
            message: 'Password updated successfully'
          });
        } catch (err) {
          console.error('Reset password error:', err);
          return res.status(500).json({
            success: 0,
            message: 'Error resetting password'
          });
        }
      },

    createUser: async (req, res) => {
        try {
        const body = req.body;
        const salt = genSaltSync(10);
        body.password = hashSync(body.password, salt);
        body.registration_date = new Date();

        const results = await create(body);
            
        return res.status(200).json({
            success: 1,
            data: results
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database connection error"
        });
    }
},

getUserByUserId: async (req, res) => {
    try {
        const id = req.params.id;
        const results = await getUserByUserId(id);
        
        if (!results) {
            return res.json({
                success: 0,
                message: "Record not Found"
            });
        }
        
        return res.json({
            success: 1,
            data: results
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},
getUsers: async (req, res) => {
    try {
        const results = await getUsers();
        return res.json({
            success: 1,
            data: results
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},
updateUsers: async (req, res) => {
    try {
        const body = req.body;
        if (body.password) {
            const salt = genSaltSync(10);
            body.password = hashSync(body.password, salt);
        }
        
        const results = await updateUser(body);
        
        if (!results || results.affectedRows === 0) {
            return res.json({
                success: 0,
                message: "Failed to update user or user not found"
            });
        }
        
        return res.json({
            success: 1,
            message: "Updated successfully"
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},
deleteUser: async (req, res) => {
    try {
        const id = req.params.id;
        const results = await deleteUser(id);
        
        if (!results || results.affectedRows === 0) {
            return res.json({
                success: 0,
                message: "User not Found"
            });
        }
        
        return res.json({
            success: 1,
            message: "User deleted successfully"
        });
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
},
login: async (req, res) => {
    try {
        const body = req.body;
        const results = await getUserByUserEmail(body.email);
        
        if (!results) {
            return res.json({
                success: 0,
                message: "Invalid email or password"
            });
        }
        
        const isPasswordValid = compareSync(body.password, results.password);
        if (isPasswordValid) {
            results.password = undefined;
            const jsontoken = sign({ userId: results.id }, "qwe1234", {
                expiresIn: "5h",
            });
            
            return res.json({
                success: 1,
                message: "Login successful",
                token: jsontoken,
                user: results,
            });
        } else {
            return res.json({
                success: 0,
                message: "Invalid email or password"
            });
        }
    } catch (err) {
        console.error(err);
        return res.status(500).json({
            success: 0,
            message: "Database error"
        });
    }
}
};
