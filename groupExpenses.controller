const groupExpenseService = require('../grp_expenses/groupExpenses.service');
const groupService = require('../grp_expenses/group.service');
const pool = require('../../config/database');

  exports.addGroupExpense = async (req, res) => {
    try {
      const { item_price, expense_type, item_name } = req.body;
      const userId = req.user.userId;
      const groupId = req.params.groupId;
  
      // Validate required fields
      if (!item_price || !expense_type || !item_name) {
        return res.status(400).json({
          success: 0,
          message: "Missing required fields (item_price, expense_type, item_name)"
        });
      }
  
      // Verify user is a member of the group
      const isMember = await groupService.isGroupMember(userId, groupId);
      if (!isMember) {
        return res.status(403).json({
          success: 0,
          message: "You are not a member of this group"
        });
      }
  
      // Add the expense
      const expense = await groupExpenseService.addGroupExpense({
        userId,
        group_id: groupId,
        item_price,
        expense_type,
        item_name
      });
  
      return res.status(200).json({
        success: 1,
        message: "Group expense added successfully",
        data: expense
      });
    } catch (err) {
      console.error("Add group expense error:", err);
      return res.status(500).json({
        success: 0,
        message: err.message || "Failed to add expense"
      });
    }
  };

  // Edit an existing group expense
  exports.editGroupExpense = async (req, res) => {
    try {
      const { item_price, expense_type, item_name } = req.body;
      const expenseId = req.params.expenseId || req.params.id;
      const userId = req.user.userId;
      const canEdit = await groupExpenseService.canUserEditExpense(userId, expenseId);
        if (!canEdit) {
            return res.status(403).json({
                success: 0,
                message: "You don't have permission to edit this expense"
            });
        }

        const updatedExpense = await groupExpenseService.editGroupExpense({
            id: expenseId,
            item_price,
            expense_type,
            item_name
        });

        return res.json({
            success: 1,
            message: "Expense updated successfully",
            data: updatedExpense
        });
    } catch (err) {
        console.error("Edit group expense error:", err);
        return res.status(500).json({
            success: 0,
            message: err.message || "Failed to update expense"
        });
    }
};

exports.deleteGroupExpense = async (req, res) => {
    try {
      const expenseId = req.params.expenseId || req.params.id;
      await groupExpenseService.deleteGroupExpense(expenseId);
      
      return res.json({
        success: 1,
        message: "Expense deleted successfully"
      });
    } catch (err) {
      console.error("Delete error:", err);
      return res.status(500).json({
        success: 0,
        message: err.message || "Deletion failed"
      });
    }
};

  // Get expenses for a specific group
  exports.getGroupExpenses = async (req, res) => {
    try {
      const groupId = req.params.groupId;
      const monthYear = req.query.monthYear || 
        `${new Date().getFullYear()}-${String(new Date().getMonth() + 1).padStart(2, '0')}`;
      
      // Validate monthYear format
      if (!/^\d{4}-\d{2}$/.test(monthYear)) {
        return res.status(400).json({
          success: 0,
          message: "Invalid month format (use YYYY-MM)"
        });
      }

      const expenses = await groupExpenseService.getGroupExpenses(groupId, monthYear);
      
      return res.json({
        success: 1,
        data: expenses
      });
    } catch (err) {
      console.error("Get expenses error:", err);
      return res.status(500).json({
        success: 0,
        message: "Failed to fetch expenses"
      });
    }
};

exports.removeMember = async (req, res) => {
  try {
    const { groupId, memberId } = req.params;
    const userId = req.user.userId;

    const [membership] = await pool.query(
      'SELECT role FROM group_members WHERE group_id = ? AND user_id = ?',
      [groupId, userId]
    );
    
    if (membership.length === 0 || (membership[0].role !== 'admin')) {
      return res.status(403).json({
        success: 0,
        message: "Admin access required"
      });
    }

    // Prevent removing yourself
    if (parseInt(memberId) === parseInt(userId)) {
      return res.status(400).json({
        success: 0,
        message: "You cannot remove yourself"
      });
    }

    // Remove the member directly since we already verified admin status
    await pool.query(
      'DELETE FROM group_members WHERE group_id = ? AND user_id = ?',
      [groupId, memberId]
    );
    
    return res.json({
      success: 1,
      message: "Member removed successfully"
    });
  } catch (err) {
    console.error("Remove member error:", err);
    return res.status(500).json({
      success: 0,
      message: err.message || "Failed to remove member"
    });
  }
};
  
// Middleware to verify expense ownership
exports.verifyExpenseOwnership = async (req, res, next) => {
  try {
    const expenseId = req.params.expenseId || req.params.id;
    const userId = req.user.userId;
    
    const expense = await groupExpenseService.getGroupExpenseById(expenseId);
    
    if (!expense) {
      return res.status(404).json({
        success: 0,
        message: "Expense not found"
      });
    }
    
    // Check permissions
    const isCreator = expense.user_id == userId;  // Note: == for loose comparison
    const isAdmin = await groupService.isGroupAdmin(userId, expense.group_id);
    
    if (!isCreator && !isAdmin) {
      return res.status(403).json({
        success: 0,
        message: "Unauthorized to modify this expense"
      });
    }
    
    req.expense = expense;
    next();
  } catch (err) {
    console.error("Ownership verification error:", err);
    return res.status(500).json({
      success: 0,
      message: "Internal server error"
    });
  }
};

